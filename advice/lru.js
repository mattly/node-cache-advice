// Generated by CoffeeScript 1.6.1
(function() {
  var callbackify, lru,
    __slice = [].slice;

  lru = require('lru-cache');

  callbackify = function(fn, context) {
    return function() {
      var args, callback, result, _i;
      args = 2 <= arguments.length ? __slice.call(arguments, 0, _i = arguments.length - 1) : (_i = 0, []), callback = arguments[_i++];
      try {
        result = fn.apply(context, args);
        return callback(void 0, result);
      } catch (e) {
        return callback(e);
      }
    };
  };

  module.exports = function(config) {
    var cache, method, _i, _len, _ref;
    config || (config = 50);
    cache = {
      lru: lru(config)
    };
    _ref = ['get', 'set', 'del'];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      method = _ref[_i];
      cache[method] = callbackify(cache.lru[method], cache.lru);
    }
    return cache;
  };

}).call(this);
